# QNACF - Концепция и использование

## Что такое QNACF

**QNACF (Context Focusing)** — это методология превращения туманных, неструктурированных задач в чёткие, выполнимые чек-листы через структурированный диалог вопрос-ответ между человеком и ИИ-ассистентом.

## Основная идея

Люди часто не могут правильно сформулировать свои идеи и задачи, но у них есть интеллектуальные способности для принятия решений. QNACF использует эти способности через диалог, превращая хаос мыслей в структурированный план действий.

## Как использовать QNACF

### 1. Запуск диалога
Используй ключевое слово **"QNACF"** или промт:
```
Начинаем QNACF (Context Focusing) диалог!

Твоя задача — задавать мне по одному вопросу с 2-5 вариантами ответов (пронумерованными 1, 2, 3...), где:
- Каждый вариант имеет плюсы и минусы
- Один вариант помечен как предпочтительный с объяснением почему
- Я отвечаю цифрой + конкретизирую/направляю
- Каждый вопрос приближает к полному пониманию задачи

Основные вопросы для решения:
1. Зачем это нужно?
2. Как это работает и почему работает?
3. Что мы должны знать конкретно?
4. Из каких базовых компонентов состоит приложение?
5. Как правильно декомпозировать на поддерживаемые части?
6. Как оформить в виде git репозитория?
7. Как сделать минималистичным по установке и поддержке?

В итоге получим два чек-листа:
- **Реализации** (выполнимые действия с тестами)
- **Приёмки** (бизнес-критерии в формате "Пользователь заходит и видит...")

Начинаем с первого вопроса!
```

### 2. Структура диалога
- **По одному вопросу** с 2-5 вариантами ответов
- **Плюсы и минусы** для каждого варианта
- **Предпочтительный вариант** с обоснованием
- **Итеративность** - можно возвращаться к предыдущим вопросам
- **Конкретизация** - пользователь дополняет ответы

### 3. Результат
Два типа чек-листов в папке `TODO/`:
- **`tasks/`** - чек-лист эффективной реализации
- **`criteria/`** - чек-лист бизнес-критериев приёмки

## Файловая структура

```
QNACF/
├── questions/           # Вопросы агента (JSON)
├── answers/            # Ответы пользователя (JSON)
├── backups/            # Бэкапы для безопасности
├── TODO/               # Итоговые чек-листы
│   ├── tasks/          # Чек-лист реализации
│   │   ├── mapping_checklist.md
│   │   ├── task_001.md
│   │   └── task_002.md
│   └── criteria/       # Чек-лист приёмки
│       ├── mapping_checklist.md
│       ├── criteria_001.md
│       └── criteria_002.md
├── core_script.sh      # Автоматизация файлов
├── server.js           # Node.js API сервер
├── public/index.html   # Web-интерфейс
├── docker-compose.yml  # Docker конфигурация
├── qnacf_method.md     # Документация метода
└── .cursor/rules/      # Правила для Cursor
    ├── core_script.mdc # Правила работы с core_script
    └── concept.mdc     # Этот файл
```

## Автоматизация через приложение

### Web-интерфейс
- Открой http://localhost:8820
- Вопросы отображаются с вариантами ответов
- Выбери вариант, добавь комментарий, нажми "Подтвердить выбор"
- Система автоматически создаёт новые вопросы

### Core Script
- Используй `./core_script.sh` для управления файлами
- См. `.cursor/rules/core_script.mdc` для деталей
- Все операции логируются в файлы

### API
- `GET /api/status` - статус системы
- `GET /api/questions` - список вопросов
- `POST /api/questions` - создание вопроса
- `POST /api/answers` - сохранение ответа

## Применение

QNACF подходит для:
- Планирования сложных проектов
- Декомпозиции больших задач
- Прояснения неясных требований
- Создания технических спецификаций
- Любых задач, где нужно "разложить по полочкам"

## Ключевые принципы

1. **Структурированность** - хаос превращается в порядок
2. **Прозрачность** - весь процесс виден в файлах
3. **Итеративность** - можно корректировать и улучшать
4. **Практичность** - результат сразу готов к реализации
5. **Масштабируемость** - накапливается опыт и улучшения

## Быстрый старт

1. **Запусти приложение**: `docker-compose up` или `node server.js`
2. **Открой интерфейс**: http://localhost:8820
3. **Начни диалог**: используй промт QNACF
4. **Следуй процессу**: отвечай на вопросы через интерфейс
5. **Получи результат**: чек-листы в папке `TODO/`

## Интеграция с Cursor

Создай правило в настройках Cursor:
```json
{
  "name": "QNACF Context Focusing",
  "trigger": "QNACF",
  "description": "Запускает метод фокусировки контекста через структурированный диалог",
  "prompt": "Начинаем QNACF (Context Focusing) диалог! Твоя задача — задавать мне по одному вопросу с 2-5 вариантами ответов (пронумерованными 1, 2, 3...), где каждый вариант имеет плюсы и минусы, один помечен как предпочтительный с объяснением. Я отвечаю цифрой + конкретизирую. Каждый вопрос приближает к полному пониманию задачи. В итоге получим два чек-листа: Реализации (выполнимые действия с тестами) и Приёмки (бизнес-критерии). Начинаем с первого вопроса!",
  "files": {
    "create": [
      "qna_history.md",
      "TODO/tasks/mapping_checklist.md", 
      "TODO/criteria/mapping_checklist.md"
    ]
  }
}
```

---

*QNACF — это не просто метод, это способ мышления о сложных задачах через структурированный диалог.*